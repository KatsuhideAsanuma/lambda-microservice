version: "3"

services:
  # API Gateway
  envoy:
    build:
      context: ./envoy
    ports:
      - "9000:8080"
    depends_on:
      - gateway
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 5s
      timeout: 5s
      retries: 3
      
  # OpenFaaS Gateway
  gateway:
    image: ghcr.io/openfaas/gateway:latest
    environment:
      - functions_provider_url=http://faas-provider:8080/
      - direct_functions=true
      - read_timeout=30s
      - write_timeout=30s
    ports:
      - "8000:8080"
      
  # OpenFaaS Provider
  faas-provider:
    image: functions/faas-netes:latest
    environment:
      - functions_namespace=lambda-microservice
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - nats
      
  # NATS for OpenFaaS
  nats:
    image: nats-streaming:0.22.0
    command: ["-m", "8222", "--store=memory", "--cluster_id=faas-cluster"]
    
  # Database
  postgres:
    image: postgres:14-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: lambda_microservice
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Node.js Runtime
  nodejs-runtime:
    build:
      context: ./runtimes/nodejs
    ports:
      - "8081:8080"
    environment:
      - NODE_ENV=development
    depends_on:
      - controller
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Python Runtime
  python-runtime:
    build:
      context: ./runtimes/python
    ports:
      - "8082:8080"
    environment:
      - PYTHON_ENV=development
    depends_on:
      - controller
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Rust Runtime
  rust-runtime:
    build:
      context: ./runtimes/rust
    ports:
      - "8083:8080"
    environment:
      - RUST_ENV=development
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/lambda_microservice
      - DB_LOGGING_ENABLED=true
      - RUST_LOG=debug
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Rust Controller
  controller:
    build:
      context: ./controller
    ports:
      - "8080:8080"
    environment:
      - HOST=0.0.0.0
      - PORT=8080
      - DATABASE_URL=postgres://postgres:postgres@postgres:5432/lambda_microservice
      - REDIS_URL=redis://redis:6379
      - REDIS_CACHE_URL=redis://redis:6379
      - SESSION_EXPIRY_SECONDS=3600
      - NODEJS_RUNTIME_URL=http://nodejs-runtime:8080
      - PYTHON_RUNTIME_URL=http://python-runtime:8080
      - RUST_RUNTIME_URL=http://rust-runtime:8080
      - RUNTIME_TIMEOUT_SECONDS=30
      - RUNTIME_FALLBACK_TIMEOUT_SECONDS=15
      - RUNTIME_MAX_RETRIES=3
      - MAX_SCRIPT_SIZE=1048576
      - WASM_COMPILE_TIMEOUT_SECONDS=60
      - OPENFAAS_GATEWAY_URL=http://gateway:8080
      - RUNTIME_SELECTION_STRATEGY=PrefixMatching
      - CACHE_TTL_SECONDS=3600
      - KUBERNETES_NAMESPACE=lambda-microservice
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "/bin/sh", "-c", "exit 0"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
