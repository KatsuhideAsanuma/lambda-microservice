apiVersion: apps/v1
kind: Deployment
metadata:
  name: lambda-controller
  namespace: lambda-microservice
  labels:
    app: lambda-controller
spec:
  replicas: 2
  selector:
    matchLabels:
      app: lambda-controller
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app: lambda-controller
    spec:
      containers:
      - name: controller
        image: ${REGISTRY}/lambda-microservice-controller:${TAG}
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
        env:
        - name: HOST
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: HOST
        - name: PORT
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: PORT
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: lambda-db-credentials
              key: url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: lambda-redis-credentials
              key: url
        - name: REDIS_CACHE_URL
          valueFrom:
            secretKeyRef:
              name: lambda-redis-credentials
              key: cache_url
        - name: SESSION_EXPIRY_SECONDS
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: SESSION_EXPIRY_SECONDS
        - name: NODEJS_RUNTIME_URL
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: NODEJS_RUNTIME_URL
        - name: PYTHON_RUNTIME_URL
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: PYTHON_RUNTIME_URL
        - name: RUST_RUNTIME_URL
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: RUST_RUNTIME_URL
        - name: RUNTIME_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: RUNTIME_TIMEOUT_SECONDS
        - name: RUNTIME_FALLBACK_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: RUNTIME_FALLBACK_TIMEOUT_SECONDS
        - name: RUNTIME_MAX_RETRIES
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: RUNTIME_MAX_RETRIES
        - name: MAX_SCRIPT_SIZE
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: MAX_SCRIPT_SIZE
        - name: WASM_COMPILE_TIMEOUT_SECONDS
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: WASM_COMPILE_TIMEOUT_SECONDS
        - name: OPENFAAS_GATEWAY_URL
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: OPENFAAS_GATEWAY_URL
        - name: RUNTIME_SELECTION_STRATEGY
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: RUNTIME_SELECTION_STRATEGY
        - name: CACHE_TTL_SECONDS
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: CACHE_TTL_SECONDS
        - name: KUBERNETES_NAMESPACE
          valueFrom:
            configMapKeyRef:
              name: lambda-controller-config
              key: KUBERNETES_NAMESPACE
        resources:
          limits:
            cpu: "1"
            memory: "1Gi"
          requests:
            cpu: "500m"
            memory: "512Mi"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
      terminationGracePeriodSeconds: 30
